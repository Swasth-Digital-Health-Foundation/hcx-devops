apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Values.namespace }}
  labels:
    app: flink
data: 
  base-config: |+
    kafka {
      broker-servers = "{{ .Values.common.kafka_host }}:9092"
      zookeeper = "{{ .Values.common.zookeeper_host }}:2181"
        producer {
          max-request-size = 1572864
        }
      }
      job {
        env = "{{ .Values.common.env }}"
        enable.distributed.checkpointing = true
        # enable.distributed.checkpointing = false
        statebackend {
          base.url = "{{ .Values.hcx_pipeline_jobs.s3_bucket_name }}"
          # base.url = "s3://pipeline-jobs-checkpoint"
        }
      }
      task {
        parallelism = 1
        consumer.parallelism = 1
        checkpointing.compressed = true
        checkpointing.interval = 60000
        checkpointing.pause.between.seconds = 30000
        restart-strategy.attempts = 3
        restart-strategy.delay = 30000
      }
      postgres {
        host = "{{ .Values.common.keycloak_postgresql_host }}"
        port = 5432
        maxConnections = 2
        user = "{{ .Values.common.keycloak_postgresql_user }}"
        password = "{{ .Values.common.keycloak_postgresql_password }}"
        database: postgres
        table: payload
      }
      redis {
        host = redis-master.{{ .Values.common.env }}.svc.cluster.local
        port = 6379
        expires = 3600
      }
      redisdb{
        connection {
          timeout: 30000
          }
        assetstore {
          id = 0
          }
      }
      es {
        basePath = "{{ .Values.common.es_host }}:9200"
        batchSize = 1000
      }
      registry {
        hcx.code = "{{ .Values.common.REGISTRY_HCX_CODE }}"
      }
      hcx-apis{
        endPointUrl = "http://hcx-api.{{ .Values.common.env }}.svc.cluster.local:8080"
      }
      max.retry = 3
      allowedEntitiesForRetry = ["coverageeligibility", "preauth", "claim"]
      audit {
        index = "hcx_audit"
        alias = "hcx_audit"
        timezone = "IST"
      }
      jwt-token {
        privateKey = "{{ .Values.hcx_onboard.hcx_private_key }}"
        expiryTime = 300000
      }
      errorCodes {
        successCodes = [200, 202]
        errorCodes = [400, 401, 403, 404]
      }
      hcx {
        instanceName = {{ .Values.common.hcx_instance_name }}
      }
      tag = ""
{{- $name := .Release.Name }}
{{ index .Values $name | toYaml | indent 2 }}

  log4j_console_properties: |
{{ .Values.log4j_console_properties | indent 4 }}
