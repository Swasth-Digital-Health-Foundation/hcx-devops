apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: {{ .Release.Namespace }}
data:
  location.list: |-
    location /healthz {
      return 200 'OK';
    }
    location /.well-known {
      proxy_set_header Host $http_host;
      set $target http://certbot.{{.Release.Namespace}}.svc.cluster.local; 
      proxy_pass $target;
    }    
    location /grafana {
      proxy_set_header Host $http_host;
      rewrite /grafana/(.*) /$1 break;
      set $target http://monitoring-grafana.monitoring.svc.cluster.local;
      proxy_pass $target;
    }
    location /api/ {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      rewrite /api/(.*) /$1 break;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Host $host;
      set $target http://api-gateway.{{.Release.Namespace}}.svc.cluster.local:8095;
      proxy_pass $target;
    }
    location /auth {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Host $host;
      set $target http://keycloak.keycloak.svc.cluster.local:8080;
      proxy_pass $target;
    }
    location / {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      set $target http://superset.{{.Release.Namespace}}.svc.cluster.local:8088;
      proxy_pass $target;
    }
    location /api/v1/ {
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      set $target http://superset.{{.Release.Namespace}}.svc.cluster.local:8088;
      proxy_pass $target;
    }
  sites.conf: |-
    # Ref: https://github.com/openresty/openresty/#resolvconf-parsing
    resolver local=on;
    # Need real ip address for flags in replay.
    # Some LBs will forward real ips as x-forwarded-for
    # So making that as priority
    map $http_x_forwarded_for $real_ip {
        ~^(\d+\.\d+\.\d+\.\d+) $1;
        default $remote_addr;
    }
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }
    server {
      listen 80 default_server;
      listen [::]:80 default_server;
      # server_name _;
      include /etc/nginx/conf.d/location.list;
    }
     server {
       listen              443 ssl;
       server_name {{.Values.nginx_ingress.domainName}};
       ssl_certificate     /etc/nginx/secrets/tls.crt;
       ssl_certificate_key /etc/nginx/secrets/tls.key;
       include /etc/nginx/conf.d/location.list;
    }
  prometheus.conf: |-
    tcp_nodelay on;

    lua_shared_dict prometheus_metrics 10M;

    error_log stderr;

    map $upstream_cache_status $cache_status {
      default  $upstream_cache_status;
      ''       "NONE";
    }

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics",{sync_interval=0.4})
        metric_requests = prometheus:counter("nginx_http_requests_total","Number of HTTP requests", {"host", "status", "request_method", "cache_status"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds","HTTP request latency", {"host"})
        metric_connections = prometheus:gauge("nginx_http_connections","Number of HTTP connections", {"state"})
    }
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.var.request_method, ngx.var.cache_status})
        metric_latency:observe(tonumber(ngx.var.request_time),{ngx.var.server_name})
    }
    header_filter_by_lua_block {
      ngx.header["server"] = nil
    }
    server {
      listen 9145;
      location /metrics {
        content_by_lua_block {
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        }
      }
    }
